package db

import (
	"database/sql"
	"log"
	"os"
	"path/filepath"

	_ "github.com/mattn/go-sqlite3"
)

// InitDB –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
func InitDB(dbFile string) (*sql.DB, error) {
	// –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
	db, err := sql.Open("sqlite3", dbFile)
	if err != nil {
		return nil, err
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ scheduler
	var exists int
	err = db.QueryRow("SELECT COUNT(*) FROM sqlite_master WHERE type='table' AND name='scheduler';").Scan(&exists)
	if err != nil || exists == 0 {
		log.Println("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ scheduler –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –µ—ë...")
		createDatabase(db)
	}

	log.Println("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
	return db, nil
}

// createDatabase —Å–æ–∑–¥–∞—ë—Ç —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
func createDatabase(db *sql.DB) {
	query := `
	CREATE TABLE IF NOT EXISTS scheduler (
		id INTEGER PRIMARY KEY AUTOINCREMENT,
		date TEXT NOT NULL,
		title TEXT NOT NULL,
		comment TEXT,
		repeat TEXT
	);
	`
	_, err := db.Exec(query)
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã: %v", err)
	}
	log.Println("‚úÖ –¢–∞–±–ª–∏—Ü–∞ scheduler —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ (–∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª–∞)")
}

// GetDBFile –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ `go_final_project_ref/scheduler.db`
func GetDBFile() string {
	// 1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
	if envDBFile := os.Getenv("TODO_DBFILE"); envDBFile != "" {
		log.Printf("üìÇ –ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –ë–î –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è: %s", envDBFile)
		return envDBFile
	}

	// 2Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
	baseDir, err := os.Getwd()
	if err != nil {
		log.Fatal("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞:", err)
	}

	// –ü–æ–¥–Ω–∏–º–∞–µ–º—Å—è –¥–æ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞ (go_final_project_ref)
	for !isProjectRoot(baseDir) {
		baseDir = filepath.Dir(baseDir)
		if baseDir == "/" {
			log.Fatal("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ go_final_project_ref")
		}
	}

	// 3Ô∏è‚É£ –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	dbPath := filepath.Join(baseDir, "scheduler.db")
	log.Printf("üìÇ –û–∂–∏–¥–∞–µ–º—ã–π –ø—É—Ç—å –∫ –ë–î: %s", dbPath)

	return dbPath
}

// isProjectRoot –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∫–æ—Ä–Ω–µ–º –ø—Ä–æ–µ–∫—Ç–∞
func isProjectRoot(path string) bool {
	_, err := os.Stat(filepath.Join(path, "go.mod"))
	return err == nil
}
